geom_line()
sim_power(.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
?t.test
t.test(uncue_prenap, uncue_delay)
t.test(uncue_prenap, uncue_delay, paired=TRUE)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=1)
B <- rnorm(n=38,mean=(0+x), sd=1)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
length(cue_prenap)
sd(uncue_prenap)
sd(uncue_delay)
sd(uncue_delay, na.rm=TRUE)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
which(plot_df$power <= 0.05)
plot_df$power
which(plot_df$effect_sizes <= 0.05)
which(plot_df$effect_sizes >= 0.8)
plot_df$power[8]
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power(.242)
power(.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power(.242)
power(.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power(0.242)
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power <- function(x){
A <- rnorm(n=1000,mean=0, sd=0.402)
B <- rnorm(n=1000,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
sim_power <- function(x){
A <- rnorm(n=100,mean=0, sd=0.402)
B <- rnorm(n=100,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power(0.242)
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power(.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df <- data.frame(effect_sizes,power)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=1000,mean=0, sd=0.402)
B <- rnorm(n=1000,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
sim_power <- function(x){
A <- rnorm(n=100,mean=0, sd=0.402)
B <- rnorm(n=100,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=50,mean=0, sd=0.402)
B <- rnorm(n=50,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power
plot_df$power[2]
0.4/38
library(ggplot2)
ggplot(means, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
?ggplot
ggplot(mean_matrix, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
View(clean_df)
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=subject_dv,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=mean_matrix,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(1,2))
?ggplot
means
group_means = data.frame(x=means, y=c(C,U), z=c(P,D))
group_means = data.frame(x=means, y=c("C","U"), z=c("P","D"))
group_means
group_means = data.frame(x=means, y=c("C","C","U","U"), z=c("P","D","P","D"))
group_means
group_means = data.frame(all_means=means, cue_f=c("C","C","U","U"), time_f=c("P","D","P","D"))
group_means
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-0.01,
ymax=all_means+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(1,2))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-0.01,
ymax=all_means+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
group_means = data.frame(all_means=means, cue_f=c("C","C","U","U"),
time_f=c("P","D","P","D"), SEM = c(sd(means[1:length(means)])))
group_means
SEM = c(sd(cue_prenap)/38, sd(cue_delay)/38, sd(uncue_prenap)/38, sd(uncue_delay)/38)
SEM
SEM = c(sd(cue_prenap)/38, sd(cue_delay, na.rm=TRUE)/38, sd(uncue_prenap)/38, sd(uncue_delay, na.rm=TRUE)/38)
SEM
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
xlab("Cue factor")
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
xlab("Cue factor") +
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
group_means = data.frame(all_means=means, cue_f=c("Cue","Cue","Uncue","Uncue"),
time_f=c("Prenap","Delay","Prenap","Delay"), SEM)
group_means
group_means = data.frame(all_means=means, cue_f=c("Cue","Cue","Uncue","Uncue"),
Delayed Sleep Cueing Effect=c("Prenap","Delay","Prenap","Delay"), SEM)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
# vector of effect sizes
effect_sizes <- seq(.1,2,.1)
# run simulation for each effect size 1000 times
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
power(0.242)
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
library(ggplot2)
# plot the power curve
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
power[2]
# run simulation for each effect size 1000 times
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(10,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
power[2]
# run simulation for each effect size 1000 times
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(10000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
power(0.242)
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
power[2]
# run simulation for each effect size 1000 times
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
# run simulation for each effect size 1000 times
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
sim_power(0.242)
sim_power(0.242)
power(0.242)
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
power[2]
install.packages("pwr")
library("pwr", lib.loc="~/R/win-library/3.5")
?pwr.t.test
?pwr.anova.test
pwr.anova.test(k=2, f = .112, sig.level = 0.05, power = 0.51)
pwr.anova.test(k=4, f = .112, sig.level = 0.05, power = 0.51)
?`pwr-package`
install.packages("pwr2")
?pwr2
library("pwr2", lib.loc="~/R/win-library/3.5")
?pwr.2way
library("papaja")
#downloads csv data into R
aaa3841_OpenData_withNA <- read.csv("~/GitHub(assignments)/midterm/midterm/aaa3841_OpenData_withNA.csv")
#selecting data for analysis
cue_prenap = aaa3841_OpenData_withNA$Cued_Prenap
cue_delay = aaa3841_OpenData_withNA$Cued_Delayed
uncue_prenap = aaa3841_OpenData_withNA$Uncued_Prenap
uncue_delay = aaa3841_OpenData_withNA$Uncued_Delayed
#preparing new data table of the two factors with IAT scores for each subject
cue_factor = rep(c("C","U"), each = 80)
time_factor = rep(rep(c("D","P"), each = 40), 2)
subjects = aaa3841_OpenData_withNA$Ppt.
sub = as.factor(subjects)
subject_dv = c()
subject_dv =  c(cue_delay[1:length(cue_delay)], cue_prenap[1:length(cue_prenap)],
uncue_delay[1:length(uncue_delay)], uncue_prenap[1:length(uncue_prenap)])
# 2-way between subjects anova
all_data = data.frame(sub, subject_dv, cue_factor, time_factor)
library(dplyr)
nas <- all_data %>%
filter(is.na(subject_dv)==TRUE)
nas$sub<-as.factor(as.numeric(nas$sub))
bad_subjects <- levels(nas$sub)
clean_df <- all_data %>%
filter(sub %in% bad_subjects == FALSE)
aov_out = aov(subject_dv~cue_factor*time_factor+Error(sub/(cue_factor*time_factor)), clean_df)
library(xtable)
knitr::kable(xtable(summary(aov_out)))
print(model.tables(aov_out,"means"), format="markdown")
knitr::kable(xtable(group_means)
)
library(xtable)
knitr::kable(xtable(group_means))
apa_stuff
apa_stuff <- apa_print.aov(aov_out)
library(papaja)
apa_stuff <- apa_print.aov(aov_out)
apa_stuff
summary(apa_stuff)
apa_stuff
apa_stuff <- apa_print(summary(aov_out))
apa_stuff
library("papaja", lib.loc="~/R/win-library/3.5")
apa_stuff
apa_stuff
