means = c(mean(cue_prenap), mean(cue_delay), mean(uncue_prenap), mean(uncue_delay))
means
cue_delay
cue_prenap
?mean
means = c(mean(cue_prenap), mean(cue_delay, na.rm = TRUE), mean(uncue_prenap), mean(uncue_delay, na.rm = TRUE))
means
mean_matrix = as.matrix(means)
mean_matrix
?as.matrix
mean_matrix = as.matrix(means,2,2)
mean_matrix
mean_matrix = matrix(means,2,2)
mean_matrix
mean_matrix = matrix(means,2,2, byrow = TRUE)
mean_matrix
mean_matrix = matrix(means,2,2, byrow = TRUE, dimnames = c("cue", "delay"))
barplot(mean_matrix)
barplot(mean_matrix, beside= TRUE)
mean_matrix = matrix(means,2,2)
barplot(mean_matrix, beside= TRUE)
mean_matrix
barplot(mean_matrix, beside= TRUE, ylim= c(0,0.8))
devtools::install_github("crsh/papaja")
install.packages("devtools")
devtools::install_github("crsh/papaja")
library("papaja", lib.loc="~/R/win-library/3.5")
library("papaja", lib.loc="~/R/win-library/3.5")
library("devtools", lib.loc="~/R/win-library/3.5")
install.packages("pwr")
library("pwr", lib.loc="~/R/win-library/3.5")
library(pwr)
?pwr.anova.test
pwr.anova.test(k = 4, n = 40, f = 0.3, sig/sig.level = 0.05)
pwr.anova.test(k = 4, n = 40, f = 0.3, sig.level = 0.05)
pwr.anova.test(k = 4, n = 40, f = 0.112, sig.level = 0.05)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
knitr::kable(DV_analysis)
View(knitr::kable(DV_analysis))
View(DV_analysis)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
View(DV_analysis)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
View(DV_analysis)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
View(DV_analysis)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
View(DV_analysis)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
summary(aov_out)
subject_dv
cue_delay
View(all_data)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
View(all_data)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
summary(aov_out)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
barplot(mean_matrix, beside= TRUE, ylim= c(0,0.8))
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
eta_sq(aov_out)
install.packages("sjstats")
library("sjstats", lib.loc="~/R/win-library/3.5")
eta_sq(aov_out)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
summary(aov_out)
View(all_data)
aov_out = aov(subject_dv~cue_factor*time_factor+Error(sub/(cue_factor*time_factor)), all_data)
library(dplyr)
all_data %>%
filter(is.na(subject_dv)==TRUE)
unique(all_data %>%
filter(is.na(subject_dv)==TRUE))$sub
unique(as.numeric(all_data %>%
filter(is.na(subject_dv)==TRUE)))$sub
all_data %>%
filter(is.na(subject_dv)==TRUE)
nas <- all_data %>%
filter(is.na(subject_dv)==TRUE)
levels(nas$sub)
levels(as.factor(nas$sub))
as.factor(nas$sub)
nas$sub<-as.factor(nas$sub)
nas$sub
nas$sub<-as.factor(as.numeric(nas$sub))
nas
nas$sub
bad_subjects <- levels(nas$sub)
bad_subjects
clead_df <- all_data %>%
filter(sub %in% bad_subjects == FALSE)
clean_df <- all_data %>%
filter(sub %in% bad_subjects == FALSE)
clean_df
aov_out = aov(subject_dv~cue_factor*time_factor+Error(sub/(cue_factor*time_factor)), clean_df)
summary(aov_out)
a = summary(aov_out)
a
a[[1]]
class(a)
attributes(a)
a$`Error: sub:cue_factor:time_factor`
class(a$`Error: sub:cue_factor:time_factor`)
attributes(a$`Error: sub:cue_factor:time_factor`)
a$`Error: sub:cue_factor:time_factor`[[1]]
a$`Error: sub:cue_factor:time_factor`[[1]]$`Pr(>F)`
a$`Error: sub:cue_factor:time_factor`[[1]]$`Pr(>F)`[1]
a[[1]]
a[[3]]
a[[4]]
a[[4]][[1]]
a[[4]][[1]][2]
a[[4]][[1]][6]
a[[4]][[1]][5]
a[[4]][[1]][[5]]
a[[4]][[1]][[5]][1]
summary(aov_out)
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
eta_sq(aov_out)
library("sjstats", lib.loc="~/R/win-library/3.5")
eta_sq(aov_out)
eta_sq(aov_out)
# Graph of the means
library(sjstats)
eta_sq(aov_out)
summary(aov_out)
?eta_sq
eta_sq(aov_out, partial = FALSE)
eta_sq(aov_out, partial = TRUE)
print(model.tables(aov_out,"means"), format="markdown")
source('~/GitHub(assignments)/midterm/midterm/script_0403.R')
sim_power(.242)
power(effect_sizes, 0.242)
power(0.242)
# combine into dataframe
plot_df <- data.frame(effect_sizes,power)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
sim_power(.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
?t.test
t.test(uncue_prenap, uncue_delay)
t.test(uncue_prenap, uncue_delay, paired=TRUE)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=1)
B <- rnorm(n=38,mean=(0+x), sd=1)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
length(cue_prenap)
sd(uncue_prenap)
sd(uncue_delay)
sd(uncue_delay, na.rm=TRUE)
# function to run a simulated t-test
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
which(plot_df$power <= 0.05)
plot_df$power
which(plot_df$effect_sizes <= 0.05)
which(plot_df$effect_sizes >= 0.8)
plot_df$power[8]
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power(.242)
power(.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power(.242)
power(.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
# plot the power curve
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power(0.242)
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power <- function(x){
A <- rnorm(n=1000,mean=0, sd=0.402)
B <- rnorm(n=1000,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
sim_power <- function(x){
A <- rnorm(n=100,mean=0, sd=0.402)
B <- rnorm(n=100,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power(0.242)
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power(.242)
power(0.242)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df <- data.frame(effect_sizes,power)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
which(plot_df$effect_sizes >= .112)
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=1000,mean=0, sd=0.402)
B <- rnorm(n=1000,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
sim_power(0.242)
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
sim_power <- function(x){
A <- rnorm(n=100,mean=0, sd=0.402)
B <- rnorm(n=100,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=50,mean=0, sd=0.402)
B <- rnorm(n=50,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
sim_power(0.242)
power(0.242)
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power[2]
sim_power <- function(x){
A <- rnorm(n=38,mean=0, sd=0.402)
B <- rnorm(n=38,mean=(0+x), sd=0.451)
return(t.test(A,B,var.equal=TRUE, paired = TRUE)$p.value)
}
power <- sapply(effect_sizes,
FUN = function(x) {
sims <- replicate(1000,sim_power(x))
sim_power <- length(sims[sims<.05])/length(sims)
return(sim_power)})
plot_df <- data.frame(effect_sizes,power)
which(plot_df$effect_sizes >= .112)
library(ggplot2)
ggplot(plot_df, aes(x=effect_sizes,
y=power))+
geom_point()+
geom_line()
plot_df$power
plot_df$power[2]
0.4/38
library(ggplot2)
ggplot(means, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
?ggplot
ggplot(mean_matrix, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
View(clean_df)
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=subject_dv,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=mean_matrix,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(clean_df, aes(x=cue_factor,
y=means,
group=time_factor,
fill=time_factor))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=mean-0.01,
ymax=meanRT+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(1,2))
?ggplot
means
group_means = data.frame(x=means, y=c(C,U), z=c(P,D))
group_means = data.frame(x=means, y=c("C","U"), z=c("P","D"))
group_means
group_means = data.frame(x=means, y=c("C","C","U","U"), z=c("P","D","P","D"))
group_means
group_means = data.frame(all_means=means, cue_f=c("C","C","U","U"), time_f=c("P","D","P","D"))
group_means
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-0.01,
ymax=all_means+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(1,2))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-0.01,
ymax=all_means+0.01),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
group_means = data.frame(all_means=means, cue_f=c("C","C","U","U"),
time_f=c("P","D","P","D"), SEM = c(sd(means[1:length(means)])))
group_means
SEM = c(sd(cue_prenap)/38, sd(cue_delay)/38, sd(uncue_prenap)/38, sd(uncue_delay)/38)
SEM
SEM = c(sd(cue_prenap)/38, sd(cue_delay, na.rm=TRUE)/38, sd(uncue_prenap)/38, sd(uncue_delay, na.rm=TRUE)/38)
SEM
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
xlab("Cue factor")
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
ggplot(group_means, aes(x=cue_f,
y=all_means,
group=time_f,
fill=time_f))+
geom_bar(stat="identity",position="dodge")+
theme_classic(base_size=12)+
xlab("Cue factor") +
ylab("Mean IAT scores")+
geom_errorbar(aes(ymin=all_means-SEM,
ymax=all_means+SEM),
position=position_dodge(width=0.9),
width=.2,
color="black")+
coord_cartesian(ylim=c(0,1))
group_means = data.frame(all_means=means, cue_f=c("Cue","Cue","Uncue","Uncue"),
time_f=c("Prenap","Delay","Prenap","Delay"), SEM)
group_means
group_means = data.frame(all_means=means, cue_f=c("Cue","Cue","Uncue","Uncue"),
Delayed Sleep Cueing Effect=c("Prenap","Delay","Prenap","Delay"), SEM)
